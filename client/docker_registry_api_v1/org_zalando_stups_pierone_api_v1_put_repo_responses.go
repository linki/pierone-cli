package docker_registry_api_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// OrgZalandoStupsPieroneAPIV1PutRepoReader is a Reader for the OrgZalandoStupsPieroneAPIV1PutRepo structure.
type OrgZalandoStupsPieroneAPIV1PutRepoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *OrgZalandoStupsPieroneAPIV1PutRepoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewOrgZalandoStupsPieroneAPIV1PutRepoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOrgZalandoStupsPieroneAPIV1PutRepoOK creates a OrgZalandoStupsPieroneAPIV1PutRepoOK with default headers values
func NewOrgZalandoStupsPieroneAPIV1PutRepoOK() *OrgZalandoStupsPieroneAPIV1PutRepoOK {
	return &OrgZalandoStupsPieroneAPIV1PutRepoOK{}
}

/*OrgZalandoStupsPieroneAPIV1PutRepoOK handles this case with default header values.

No response was specified
*/
type OrgZalandoStupsPieroneAPIV1PutRepoOK struct {
	XDockerEndpoints string

	XDockerToken string

	Payload string
}

func (o *OrgZalandoStupsPieroneAPIV1PutRepoOK) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/{team}/{artifact}/][%d] orgZalandoStupsPieroneApiV1PutRepoOK  %+v", 200, o.Payload)
}

func (o *OrgZalandoStupsPieroneAPIV1PutRepoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Docker-Endpoints
	o.XDockerEndpoints = response.GetHeader("X-Docker-Endpoints")

	// response header X-Docker-Token
	o.XDockerToken = response.GetHeader("X-Docker-Token")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
