package docker_registry_api_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new docker registry api v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for docker registry api v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
OrgZalandoStupsPieroneAPIV1GetImageAncestry reads image ancestry

Returns the whole ancestry for an image.
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1GetImageAncestry(params *OrgZalandoStupsPieroneAPIV1GetImageAncestryParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1GetImageAncestryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1GetImageAncestryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/get-image-ancestry",
		Method:             "GET",
		PathPattern:        "/v1/images/{image}/ancestry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1GetImageAncestryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1GetImageAncestryOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1GetImageBinary reads image binary

Reads the binary data of a Docker image.
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1GetImageBinary(params *OrgZalandoStupsPieroneAPIV1GetImageBinaryParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1GetImageBinaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1GetImageBinaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/get-image-binary",
		Method:             "GET",
		PathPattern:        "/v1/images/{image}/layer",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1GetImageBinaryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1GetImageBinaryOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1GetImageForTag gets image for tag

Returns the image id for given tag
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1GetImageForTag(params *OrgZalandoStupsPieroneAPIV1GetImageForTagParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1GetImageForTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1GetImageForTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/get-image-for-tag",
		Method:             "GET",
		PathPattern:        "/v1/repositories/{team}/{artifact}/tags/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1GetImageForTagReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1GetImageForTagOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1GetImageJSON reads image metadata

Reads the JSON metadata of a Docker image layer.
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1GetImageJSON(params *OrgZalandoStupsPieroneAPIV1GetImageJSONParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1GetImageJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1GetImageJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/get-image-json",
		Method:             "GET",
		PathPattern:        "/v1/images/{image}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1GetImageJSONReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1GetImageJSONOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1GetImages dummies
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1GetImages(params *OrgZalandoStupsPieroneAPIV1GetImagesParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1GetImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1GetImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/get-images",
		Method:             "GET",
		PathPattern:        "/v1/repositories/{team}/{artifact}/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1GetImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1GetImagesOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1GetTags lists tags

Lists all tags of an artifact.
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1GetTags(params *OrgZalandoStupsPieroneAPIV1GetTagsParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1GetTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1GetTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/get-tags",
		Method:             "GET",
		PathPattern:        "/v1/repositories/{team}/{artifact}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1GetTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1GetTagsOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1Login validates login data will be called by docker client with basic auth
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1Login(params *OrgZalandoStupsPieroneAPIV1LoginParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1LoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1LoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/login",
		Method:             "GET",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1LoginReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1LoginOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1Ping checks compatibility

Checks for compatibility with Docker Registry v1.
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1Ping(params *OrgZalandoStupsPieroneAPIV1PingParams) (*OrgZalandoStupsPieroneAPIV1PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1PingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/ping",
		Method:             "GET",
		PathPattern:        "/v1/_ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1PingReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1PingOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1PostUsers dummies endpoint to redirect docker client to g e t
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1PostUsers(params *OrgZalandoStupsPieroneAPIV1PostUsersParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1PostUsersParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/post-users",
		Method:             "POST",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1PostUsersReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
OrgZalandoStupsPieroneAPIV1PutImageBinary stores image binary

Stores the binary data of a Docker image.
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1PutImageBinary(params *OrgZalandoStupsPieroneAPIV1PutImageBinaryParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1PutImageBinaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1PutImageBinaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/put-image-binary",
		Method:             "PUT",
		PathPattern:        "/v1/images/{image}/layer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1PutImageBinaryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1PutImageBinaryOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1PutImageChecksum checks image

Checks an image with a checksum.
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1PutImageChecksum(params *OrgZalandoStupsPieroneAPIV1PutImageChecksumParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1PutImageChecksumOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1PutImageChecksumParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/put-image-checksum",
		Method:             "PUT",
		PathPattern:        "/v1/images/{image}/checksum",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1PutImageChecksumReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1PutImageChecksumOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1PutImageJSON stores image metadata

Stores the JSON metadata of a Docker image layer.
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1PutImageJSON(params *OrgZalandoStupsPieroneAPIV1PutImageJSONParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1PutImageJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1PutImageJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/put-image-json",
		Method:             "PUT",
		PathPattern:        "/v1/images/{image}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1PutImageJSONReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1PutImageJSONOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1PutImages dummies
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1PutImages(params *OrgZalandoStupsPieroneAPIV1PutImagesParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1PutImagesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1PutImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/put-images",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/{team}/{artifact}/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1PutImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1PutImagesNoContent), nil
}

/*
OrgZalandoStupsPieroneAPIV1PutRepo dummies
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1PutRepo(params *OrgZalandoStupsPieroneAPIV1PutRepoParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1PutRepoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1PutRepoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/put-repo",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/{team}/{artifact}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1PutRepoReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1PutRepoOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1PutTag stores tag

Stores a tag in the registry for the given artifact.
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1PutTag(params *OrgZalandoStupsPieroneAPIV1PutTagParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1PutTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1PutTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/put-tag",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/{team}/{artifact}/tags/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1PutTagReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1PutTagOK), nil
}

/*
OrgZalandoStupsPieroneAPIV1Search searches repositories

Search for repositories in the registry.
*/
func (a *Client) OrgZalandoStupsPieroneAPIV1Search(params *OrgZalandoStupsPieroneAPIV1SearchParams, authInfo runtime.ClientAuthInfoWriter) (*OrgZalandoStupsPieroneAPIV1SearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgZalandoStupsPieroneAPIV1SearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org.zalando.stups.pierone.api-v1/search",
		Method:             "GET",
		PathPattern:        "/v1/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrgZalandoStupsPieroneAPIV1SearchReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OrgZalandoStupsPieroneAPIV1SearchOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
