package docker_registry_api_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// OrgZalandoStupsPieroneAPIV1SearchReader is a Reader for the OrgZalandoStupsPieroneAPIV1Search structure.
type OrgZalandoStupsPieroneAPIV1SearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *OrgZalandoStupsPieroneAPIV1SearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewOrgZalandoStupsPieroneAPIV1SearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOrgZalandoStupsPieroneAPIV1SearchOK creates a OrgZalandoStupsPieroneAPIV1SearchOK with default headers values
func NewOrgZalandoStupsPieroneAPIV1SearchOK() *OrgZalandoStupsPieroneAPIV1SearchOK {
	return &OrgZalandoStupsPieroneAPIV1SearchOK{}
}

/*OrgZalandoStupsPieroneAPIV1SearchOK handles this case with default header values.

Return list of matching repository names
*/
type OrgZalandoStupsPieroneAPIV1SearchOK struct {
	Payload OrgZalandoStupsPieroneAPIV1SearchOKBodyBody
}

func (o *OrgZalandoStupsPieroneAPIV1SearchOK) Error() string {
	return fmt.Sprintf("[GET /v1/search][%d] orgZalandoStupsPieroneApiV1SearchOK  %+v", 200, o.Payload)
}

func (o *OrgZalandoStupsPieroneAPIV1SearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ResultsItems0 results items0

swagger:model ResultsItems0
*/
type ResultsItems0 struct {

	/* name
	 */
	Name string `json:"name,omitempty"`
}

// Validate validates this results items0
func (o *ResultsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

/*OrgZalandoStupsPieroneAPIV1SearchOKBodyBody org zalando stups pierone API v1 search o k body body

swagger:model OrgZalandoStupsPieroneAPIV1SearchOKBodyBody
*/
type OrgZalandoStupsPieroneAPIV1SearchOKBodyBody struct {

	/* num results

	Required: true
	*/
	NumResults *int64 `json:"num_results"`

	/* query

	Required: true
	*/
	Query *string `json:"query"`

	/* results

	Required: true
	*/
	Results []*ResultsItems0 `json:"results"`
}

// Validate validates this org zalando stups pierone API v1 search o k body body
func (o *OrgZalandoStupsPieroneAPIV1SearchOKBodyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumResults(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateQuery(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateResults(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OrgZalandoStupsPieroneAPIV1SearchOKBodyBody) validateNumResults(formats strfmt.Registry) error {

	if err := validate.Required("orgZalandoStupsPieroneApiV1SearchOK"+"."+"num_results", "body", o.NumResults); err != nil {
		return err
	}

	return nil
}

func (o *OrgZalandoStupsPieroneAPIV1SearchOKBodyBody) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("orgZalandoStupsPieroneApiV1SearchOK"+"."+"query", "body", o.Query); err != nil {
		return err
	}

	return nil
}

func (o *OrgZalandoStupsPieroneAPIV1SearchOKBodyBody) validateResults(formats strfmt.Registry) error {

	if err := validate.Required("orgZalandoStupsPieroneApiV1SearchOK"+"."+"results", "body", o.Results); err != nil {
		return err
	}

	for i := 0; i < len(o.Results); i++ {

		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {

			if err := o.Results[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
